
// ****************************************************************************
//
//                                 Main code
//
// ****************************************************************************

#include "include.h"

// text screen
char TextBuf[TEXTSIZE];

const char CompTxt[] = "Computing at sys_clk = ";
const char CompTxt2[] = " MHz";
const char OkTxt[]   = "Result OK: 3.";
const char ErrTxt[]  = "> ERROR <  3.";

#define NUMBEG	13	// offset to store digits

// ENIAC - 2037 digits in year 1949, compute time 70 hours
// Machin's formula: PI = 16*arctan(1/5) - 4*arctan(1/239)
// arctan x = x - x^3/3 + x^5/5 - x^7/7 + ...

// PI with 1000000 digits: https://www.piday.org/million/
// PI with 100000 digits: http://www.geom.uiuc.edu/~huberty/math5337/groupe/digits.html

// sample to check result (4833 digits)
const char Sample[] = // 78 digits per row, 62 rows
	"3.141592653589793238462643383279502884197169399375105820974944592307816406286"
	"208998628034825342117067982148086513282306647093844609550582231725359408128481"
	"117450284102701938521105559644622948954930381964428810975665933446128475648233"
	"786783165271201909145648566923460348610454326648213393607260249141273724587006"
	"606315588174881520920962829254091715364367892590360011330530548820466521384146"
	"951941511609433057270365759591953092186117381932611793105118548074462379962749"
	"567351885752724891227938183011949129833673362440656643086021394946395224737190"
	"702179860943702770539217176293176752384674818467669405132000568127145263560827"
	"785771342757789609173637178721468440901224953430146549585371050792279689258923"
	"542019956112129021960864034418159813629774771309960518707211349999998372978049"
	"951059731732816096318595024459455346908302642522308253344685035261931188171010"
	"003137838752886587533208381420617177669147303598253490428755468731159562863882"
	"353787593751957781857780532171226806613001927876611195909216420198938095257201"
	"065485863278865936153381827968230301952035301852968995773622599413891249721775"
	"283479131515574857242454150695950829533116861727855889075098381754637464939319"
	"255060400927701671139009848824012858361603563707660104710181942955596198946767"
	"837449448255379774726847104047534646208046684259069491293313677028989152104752"
	"162056966024058038150193511253382430035587640247496473263914199272604269922796"
	"782354781636009341721641219924586315030286182974555706749838505494588586926995"
	"690927210797509302955321165344987202755960236480665499119881834797753566369807"
	"426542527862551818417574672890977772793800081647060016145249192173217214772350"
	"141441973568548161361157352552133475741849468438523323907394143334547762416862"
	"518983569485562099219222184272550254256887671790494601653466804988627232791786"
	"085784383827967976681454100953883786360950680064225125205117392984896084128488"
	"626945604241965285022210661186306744278622039194945047123713786960956364371917"
	"287467764657573962413890865832645995813390478027590099465764078951269468398352"
	"595709825822620522489407726719478268482601476990902640136394437455305068203496"
	"252451749399651431429809190659250937221696461515709858387410597885959772975498"
	"930161753928468138268683868942774155991855925245953959431049972524680845987273"
	"644695848653836736222626099124608051243884390451244136549762780797715691435997"
	"700129616089441694868555848406353422072225828488648158456028506016842739452267"
	"467678895252138522549954666727823986456596116354886230577456498035593634568174"
	"324112515076069479451096596094025228879710893145669136867228748940560101503308"
	"617928680920874760917824938589009714909675985261365549781893129784821682998948"
	"722658804857564014270477555132379641451523746234364542858444795265867821051141"
	"354735739523113427166102135969536231442952484937187110145765403590279934403742"
	"007310578539062198387447808478489683321445713868751943506430218453191048481005"
	"370614680674919278191197939952061419663428754440643745123718192179998391015919"
	"561814675142691239748940907186494231961567945208095146550225231603881930142093"
	"762137855956638937787083039069792077346722182562599661501421503068038447734549"
	"202605414665925201497442850732518666002132434088190710486331734649651453905796"
	"268561005508106658796998163574736384052571459102897064140110971206280439039759"
	"515677157700420337869936007230558763176359421873125147120532928191826186125867"
	"321579198414848829164470609575270695722091756711672291098169091528017350671274"
	"858322287183520935396572512108357915136988209144421006751033467110314126711136"
	"990865851639831501970165151168517143765761835155650884909989859982387345528331"
	"635507647918535893226185489632132933089857064204675259070915481416549859461637"
	"180270981994309924488957571282890592323326097299712084433573265489382391193259"
	"746366730583604142813883032038249037589852437441702913276561809377344403070746"
	"921120191302033038019762110110044929321516084244485963766983895228684783123552"
	"658213144957685726243344189303968642624341077322697802807318915441101044682325"
	"271620105265227211166039666557309254711055785376346682065310989652691862056476"
	"931257058635662018558100729360659876486117910453348850346113657686753249441668"
	"039626579787718556084552965412665408530614344431858676975145661406800700237877"
	"659134401712749470420562230538994561314071127000407854733269939081454664645880"
	"797270826683063432858785698305235808933065757406795457163775254202114955761581"
	"400250126228594130216471550979259230990796547376125517656751357517829666454779"
	"174501129961489030463994713296210734043751895735961458901938971311179042978285"
	"647503203198691514028708085990480109412147221317947647772622414254854540332157"
	"185306142288137585043063321751829798662237172159160771669254748738986654949450"
	"114654062843366393790039769265672146385306736096571209180763832716641627488880"
	"078692560290228472104031721186082041900042296617119637792133757511495950156604";

#define MUL 100000000	// multiplier of a cell
#define MULDIG 8	// number of digits per cell

#define DIG (TEXTSIZE-20)	// total number of digits (= 4780)
#define LEN ((DIG+MULDIG-1)/MULDIG+1+1) // length in cells (8 digits per cell)

// First cell is integer part of the number. Every cell contains 8 digits with sign.
u32 T1[LEN];	// member arctan(1/5) ... 1/(5^i)
u32 T1B[LEN];	// member arctan(1/5) ... 1/(5^i)/i
u32 T2[LEN];	// member arctan(1/239) ... 1/(239^i)
u32 T2B[LEN];	// member arctan(1/239) ... 1/(239^i)/i
u32 Acu[LEN];	// accumulator of the result

// calculate PI
void Calc()
{
	s16 i, n;
	u32 aa, c, c2, k, sum1, sum2;
	s32 a;
	u64 a2;

	// initialize numbers
	for (i = 0; i < LEN; i++)
	{
		T1[i] = 0;
		T1B[i] = 0;
		T2[i] = 0;
		T2B[i] = 0;
		Acu[i] = 0;
	}

	// init member, to get results 16/5 and -4/239 after first division
	T1[0] = 16*5;
	T2[0] = 4*239;

	// iterations
	sum1 = 1;
	sum2 = 1;
	n = 1;
	Bool odd = True; // odd member
	do
	{
		// check underflow of the member
		if (sum1)
		{
			sum1 = 0; // underflow accumulator
			c = 0; // carry
			c2 = 0;
			for (i = 0; i < LEN; i++)
			{
				// divide arctan(1/5) by number 5*5
				aa = T1[i] + c*MUL; // multyply carry by cell multiplier
				k = aa/(5*5);
				T1[i] = k;

				// get carry (remainder after division)
				c = aa - k*(5*5);

				// divide arctan(1/5) by iteration number
				a2 = k + (u64)c2*MUL; // multiply carry by cell multiplier, add result
				k = (u32)(a2 / n);
				c2 = (u32)(a2 % n); // carry
				T1B[i] = k;

				// underflow accumulator
				sum1 |= k;
			}
		}

		// check underflow of the member
		if (sum2)
		{
			sum2 = 0; // underflow accumulator
			c = 0; // carry to lower byte
			c2 = 0;
			for (i = 0; i < LEN; i++)
			{
				// divide arctan(1/239) by number 239*239
				a2 = T2[i] + (u64)c*MUL;
				k = (u32)(a2/(239*239));
				c = (u32)(a2 % (239*239));
				T2[i] = k;

				// divide arctan(1/239) by iteration number
				a2 = k + (u64)c2*MUL;
				k = (u32)(a2/n);
				c2 = (u32)(a2 % n); // carry
				T2B[i] = k;

				// underflow accumulator
				sum2 |= k;
			}
		}

		// sum of the serie
		c = 0;
		for (i = LEN-1; i >= 0; i--)
		{
			if (odd)
				k = T1B[i] - T2B[i];
			else
				k = T2B[i] - T1B[i];

			a = (s32)(k + Acu[i] + c);

			if (a >= 0)
			{
				c = a/MUL;
				a = a - c*MUL;
			}
			else
			{
				c = -1;
				a += MUL;
			}
			Acu[i] = a;
		}

		n += 2;
		odd = !odd;

	// while members are not 0
	} while (sum1 | sum2);
}

char NumBuf[15];

int main()
{
	int i;

	// print info
	memcpy(TextBuf, CompTxt, sizeof(CompTxt)-1);
	i = DecNum(NumBuf, (clock_get_hz(clk_sys)+1000000/2)/1000000);
	memcpy(&TextBuf[sizeof(CompTxt)-1], NumBuf, i);
	memcpy(&TextBuf[sizeof(CompTxt)-1 + i], CompTxt2, sizeof(CompTxt2));
	DrawTextBuf(TextBuf, COL_YELLOW, COL_BLACK);

	// main loop
	while (True)
	{
		// calculate
		Calc();

		// display the number
		u32* s = &Acu[1];
		u32 n;
		Bool ok = True;
		char ch, ch2;
		int k = 2;
		int ii = LEN-2;
		if (ii > (TEXTSIZE-NUMBEG)/8) ii = (TEXTSIZE-NUMBEG)/8;
		char* b = &TextBuf[NUMBEG];
		for (i = 1; i <= ii; i++)
		{
			n = *s++;

			ch = n/10000000 + '0';
			*b++ = ch;
			if (Sample[k++] != ch) ok = False;

			ch = (n/1000000) % 10 + '0';
			*b++ = ch;
			if (Sample[k++] != ch) ok = False;

			ch = (n/100000) % 10 + '0';
			*b++ = ch;
			if (Sample[k++] != ch) ok = False;

			ch = (n/10000) % 10 + '0';
			*b++ = ch;
			if (Sample[k++] != ch) ok = False;

			ch = (n/1000) % 10 + '0';
			*b++ = ch;
			if (Sample[k++] != ch) ok = False;

			ch = (n/100) % 10 + '0';
			*b++ = ch;
			if (Sample[k++] != ch) ok = False;

			ch = (n/10) % 10 + '0';
			*b++ = ch;
			if (Sample[k++] != ch) ok = False;

			ch = n % 10 + '0';
			*b++ = ch;
			if (Sample[k++] != ch) ok = False;
		}

		// display result
		memcpy(TextBuf, ok ? OkTxt : ErrTxt, sizeof(OkTxt)-1);
		DrawTextBuf(TextBuf, COL_WHITE, COL_BLACK);
	}
}
